{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{408:function(e,n,t){\"use strict\";t.r(n);var a=t(56),r=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"p\",[e._v(\"RPC项目的\\n目的\\n优化点\\n(1)本来只是通过服务器\\n难点，解决方案，达到什么目的\\n）亮点\")]),e._v(\" \"),t(\"p\",[e._v(\"创建Channel并设置非阻塞\\n2. Channel绑定地址\\n3. Channel注册Selector（现有通道，再给通道地址）\\nhandler在初始化时就会执行，而childHandler会在客户端成功connect后才执行，这是两者的区别。\")]),e._v(\" \"),t(\"h3\",{attrs:{id:\"简历\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#简历\"}},[e._v(\"#\")]),e._v(\" 简历\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"实现基于Java原生的Socket传输与Netty传输。消费端采用Netty方式，达到复用Channel避免多次连接与失败重连的效果。消费端和服务端采用 Netty 方式，实现Netty的心跳机制，保证连接的可靠性。 （socket:Socket实质上提供了进程通信的端点。进程通信之前，双方首先必须各自创建一个端点，使用Socket网络变成使用了Java原生IO流，实现一些机制比较复杂\")])]),e._v(\" \"),t(\"p\",[e._v(\"基于java的socket网络编程实现\\nServer端Listen监听某个端口是否有连接请求，Client端向Server 端发出连接请求，Server端向Client端发回Accept接受消息。这样一个连接就建立起来了。Server端和Client端都可以通过Send，Write等方法与对方通信。\")]),e._v(\" \"),t(\"p\",[e._v(\"选NETTY：原生NIO类库和API繁杂，需要熟练掌握Selector、ServerSocketChannel、SocketChannel、ByteBuffer等，Netty对这些API做了封装，使用起来方便，性能高(I/O模型和线程处理模型)\")]),e._v(\" \"),t(\"p\",[e._v(\"复用连接：在netty服务端是通过一个Map保存所有连接上来的客户端SocketChannel,客户端的Id作为Map的key。每次服务器端如果要向某个客户端发送消息，只需根据ClientId取出对应的SocketChannel,往里面写入message即可。channel什么时候断开，客户端下线后会断开连接，服务端监听到关闭事件，先关闭Channel，再释放线程组资源。\\n失败重连：是指服务器宕机下线后，连接断开，客户端发送消息获取通道的过程。这边我是通过给客户端使用了客户端如何发现服务，先获取IP地址和端口，客户端根据获取的端口地址连接返回ChannelFuture，Netty 是异步非阻塞的，所有的 I/O 操作都为异步的。因此，我们不能立刻得到操作是否执行成功，但是，你可以通过 ChannelFuture 接口的 addListener() 方法注册一个 ChannelFutureListener，当操作执行成功或者失败时，监听就会自动触发返回结果。并给重写它的监听器逻辑(成功减1，否则通过schedule(重连5次)，主线程通过countdownLatch.await()阻塞线程，知道连接成功返回channel\")]),e._v(\" \"),t(\"p\",[e._v(\"childHandler()给引导类创建一个ChannelInitializer ，然后制定了服务端消息的业务处理逻辑，提供了一个容器并定义了用于沿着链传播入站和出站事件流的 API，给心跳检测通过IdleEvent事件，有4个参数分别多久没读写触发心跳，单位，底层是它通过定时任务完成的，定时向服务端放送Ping消息，检查SocketChannel是否终断。\")]),e._v(\" \"),t(\"p\",[e._v(\"Java的NIO采用的是Reactor线程模型中的单Reactor单线程模型（前台和服务员是一个人，全程为顾客服务，可以服务多个人），Netty的NIO采用的是主从Reactor模型，是多Reactor多线程模型。\\nNetty是异步事件驱动的框架，网络IO模型采用的是NIO（同步非阻塞IO）。异步事件驱动框架体现在所有的I/O操作是异步的，所有的IO调用会立即返回，并不保证调用成功与否，但是调用会返回ChannelFuture，netty会通过ChannelFuture通知你调用是成功了还是失败了亦或是取消了。ChannelFuture的作用是用来保存Channel异步操作的结果。\")]),e._v(\" \"),t(\"p\",[e._v(\"）\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[e._v(\"采用Nacos作为注册中心管理相关服务的地址信息，通过自定义负载均衡算法，实现以统一的接口对外提供多个服务的功能。（Set和hashmap本地缓存（优先）和nacos获取，）\")])]),e._v(\" \"),t(\"li\",[t(\"p\",[e._v(\"自定义注解实现服务启动的自动注册，与服务端关闭服务自动注销的效果（构造方法扫描弄servicescan方法，获取到对应服务名字String，通过反射获取类，给他放入map和Nacos中、、@ServiceScan注解（注解是加在启动类上的，那么，我们怎么知道启动类是哪一个呢？答案是通过调用栈。方法的调用和返回是通过方法调用栈来实现的，当调用一个方法时，该方法入栈，该方法返回时，该方法出站，控制回到栈顶的方法。那么，main 方法一定位于调用栈的最底端）   工具类（用于获取 main 所在的类，判断类sCAN注解(获取注解值，确定扫描范围)）传入一个包名，扫描该包及其子包下所有类，将Class对象放入Set中返回，）\")])]),e._v(\" \"),t(\"li\",[t(\"p\",[e._v(\"实现自定义的通信协议，完成消息的编解码功能，达到防止TCP粘包与拆包，收发指定消息，识别消息类型的效果（自定义协议4魔数（标志协议包），Package type(请求还是响应)，序列化type,数据长度，实际数据、、、、用在编解码方法中，编码：ByteBuf中写入魔数，根据请求写入对应的包类型码，写入序列化方式，数据长度和数据；解码：从ByteBuf中读数据，根据读取的参数处理，数据反序列化需要读取缓冲区中的序列化码，最后放入集合中）\")])]),e._v(\" \"),t(\"li\",[t(\"p\",[e._v(\"采用多种序列化方式，解决跨语言跨平台问题，提升了消息传递的性能。（\\nJSON序列化，key-value,占用空间大，比较简洁\\nkryo高效，序列化后体积小，跨语言复杂\\nProtobuf高效，支持多种语言，复杂，不同语言使用时都需要不同的IDL编译器，生辰序列化工具类\\nSocket通讯核心是收发字节，只能语言内部使用，因此跨语言时传输的只能时字节序列化，(字节跨语言没问题)    ）\")])])]),e._v(\" \"),t(\"p\",[e._v(\"1：RPC的请i去本质上网络请求，服务端应开启端口监听客户端请求。\\nNacos优化点：1存储（如何存储）\\n2高可用(当服务挂掉是从本地内存获取，先本地还是先MAP？)\\n3健康检查(Nacos定期向Provider发起健康检查)\\n4监听状态（Provider增加，减少，Nacos除了及时更新，还会通知Consumer）\\n3: 序列化：看通用性，性能，可扩展性，易用性\\n4：Netty异步时间驱动的网络应用程序框架，支持快说开发可维护的高性能的面向协议的服务器和客户端\\nNetty线程模型设计：放到线程串还是不同线程中执行影响性能，netty采用Reactor线程模型设计（服务器送到请求后，执行的逻辑大致有：编解码，消息派发，业务处理，返回响应；）nio实现了IO多路复用中的Reactor模型(一个线程可以通过Selector轮询监听多个线程)\\nReactor核心原理：Re actor负责监听时间，在监听到事件后，分发给相关的处理器处理   对比传统的阻塞I/O(独立线程耗资源；没数据线程阻塞耗资源)\\n并发读写线程模式：Reactor模型是一个线程负责客户端连接，一个线程池负责网络读写，一个线程池负责事务计算处理\\nNetty是支持Reactor模型中的三种线程模式\")]),e._v(\" \"),t(\"p\",[e._v(\"5序列化方式：原生序列化：效率低，无法跨语言\")]),e._v(\" \"),t(\"p\",[e._v(\"知识：\\nUNIX五种IO,JAVA三种IO\\nreactor模式 事件驱动的一种实现，请求处理（基于线程，基于时间驱动（一个线程处理多个请求））\")]),e._v(\" \"),t(\"p\",[e._v(\"请求（请求号，接口名字，方法名，参数，参数类型，心跳）\\n响应（请求号，状态码，消息，响应数据）\\n协议（）\\n消息编解码器\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"客户端动态代理\\n在客户端通过动态代理获取对应的实例，调用远程服务端的实例像在本地调用一样\")])]),e._v(\" \"),t(\"p\",[e._v(\"通过动态代理传入接口类，获取代理对象，给代理对象中传入client，执行反射方法（构建请求，client的发送方法（通过注册中心由接口名字发现地址，建立通道连接）），获取结果\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"服务端传入对应ip和端口\\n服务端反射调用（事件处理器中根据接口名反射调用对应服务，通过接口名去服务提供类中的本地MAP中获取service类实例，通过反射传入参数列表和方法名，获取对应的方法，method.invoke方法（方法名，参数列表）完成对应调用返回结果），再写入方法的调用结果和请求id-----如果是心跳则不处理，Netty中有对应uservent处理\")])])])}),[],!1,null,null,null);n.default=r.exports}}]);","extractedComments":[]}