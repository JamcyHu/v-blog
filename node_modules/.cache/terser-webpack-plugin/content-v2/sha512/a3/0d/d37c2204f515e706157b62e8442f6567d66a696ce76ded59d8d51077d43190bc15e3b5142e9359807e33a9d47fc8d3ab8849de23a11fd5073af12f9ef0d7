{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{406:function(t,a,s){\"use strict\";s.r(a);var n=s(56),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[s(\"h1\",{attrs:{id:\"jvm\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jvm\"}},[t._v(\"#\")]),t._v(\" JVM\")]),t._v(\" \"),s(\"p\",[t._v(\"程序-框架-API-JVM\\nJVM机构模型: Java编译器输入的指令流基本上是属于一种栈的指令集架构（移植性好），一种基于寄存器的指令集架构（性能好）。\\n![](D:\\\\soft\\\\IntelliJ IDEA\\\\资料\\\\导图笔记\\\\图片\\\\JVM\\\\JVM架构.PNG)\\n由于跨平台的设计，JAVA的指令都是根据栈来设计的\\n由于跨平台的设计，JAVA的指令都是根据栈来设计的\\n虚拟机的启动:JAva虚拟机的启动时通过引导类加载器创建一个初始类来完成的，这个类是由虚拟机的具体实现指定的\\nHotSpot VM一次编译，处处运行\")]),t._v(\" \"),s(\"h3\",{attrs:{id:\"二-类加载子系统\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二-类加载子系统\"}},[t._v(\"#\")]),t._v(\" 二 类加载子系统\")]),t._v(\" \"),s(\"p\",[t._v(\"1 内存结构概述\\n2类加载器与类的加载过程\\nclassloader只负责class文件的加载，运行由executionengine决定\\nCLASS File被加载到JVM，称为DNA元数据模板，放在方法区，根据这个文件实例化出N个实\\n.class文件->JVM->最终成为元数据模板，需要运输工具(Class Loader)\\n加载-》链接（验证，准备，解析）-》初始化\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[t._v(\"加载（由类名取二进制流\\\\字节流静态结构变方法去区运行时结构\\\\内存中生成对象），还涉及到加载.class文件的方式\")]),t._v(\" \"),s(\"li\",[t._v(\"链接（验证（是否符合虚拟机要求（如专属工具解析class文件开头CA FE BA BE,能被java虚拟机识别的有效起始）），准备（类\"),s(\"em\",[t._v(\"变量\")]),t._v(\"分配内设置初始值（零值），不包含final（常量）修饰的static，编译时就已赋值），解析（常常量池内符号引用转换为直接引用（直接指向目标的指针或间接定位对象的句柄等）的过程））\")]),t._v(\" \"),s(\"li\",[t._v(\"初始化（执行类\")])])])}),[],!1,null,null,null);a.default=e.exports}}]);","extractedComments":[]}