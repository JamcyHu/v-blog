{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{411:function(a,v,t){\"use strict\";t.r(v);var s=t(56),_=Object(s.a)({},(function(){var a=this,v=a.$createElement,t=a._self._c||v;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":a.$parent.slotKey}},[t(\"h4\",{attrs:{id:\"集合\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#集合\"}},[a._v(\"#\")]),a._v(\" 集合\")]),a._v(\" \"),t(\"p\",[a._v(\"Collection接口\\nfail-fast(多个线程修改集合，并发修改异常)\")]),a._v(\" \"),t(\"p\",[a._v(\"list,set,queue\")]),a._v(\" \"),t(\"p\",[a._v(\"map接口\")]),a._v(\" \"),t(\"p\",[a._v(\"区别：存户有无序，重复问题()\\n选用集合情况，键值对，map，元素值，collection接口下集合\")]),a._v(\" \"),t(\"p\",[a._v(\"各自的实现类\\nlist->\\narraylist,vector,linkedlist====数据结构，\\nArraylist 和 Vector 的区别\\nArraylist 与 LinkedList 区别(主要)===线程安全，数组结构，插入删除时间，快速访问，空间占用\")]),a._v(\" \"),t(\"p\",[a._v(\"arraylist扩容机制，三种初始（无参构造（add才分配，10，1.5），带参数初始化，传集合）\")]),a._v(\" \"),t(\"p\",[a._v(\"set->\\nhashset,linkedhashset,treeset(唯一有序红黑树)====数据结构，\\ncomparable（lang包） 和 Comparator(util) 排序\\n三个实现类异同，数据结构异，场景异，同唯一非安全。\\nhashset重复问题(对象hashcode,相同调用equals())\\nhashcode与equals（）问题\\n==与equals()区别\")]),a._v(\" \"),t(\"p\",[a._v(\"queue->\\npriorityqueue,arrayqueue====数据结构，\\n先进先出，\\nArrayDeque 与 LinkedList 的区别\")]),a._v(\" \"),t(\"p\",[a._v(\"map->\\nhashmap,linkedHashmap,hashtable,treemap====数据结构，\\nhashmap与hashtable区别（线程，数据结构（链表转转换红黑树问题），null，效率，初始容量扩容（两种扩容））\\nhashmap与hashset（实现，对象，方法，hashcode）\\nhashmap与treemap\\nhashmap底层(HashMap 通过 key 的 hashCode 经过扰动函数处理过后得到 hash 值，然后通过 (n - 1) & hash 判断当前元素存放的位置，扰动函数(h = key.hashCode()) ^ (h >>> 16))\\nhashmap遍历\\nConcurrentHashMap 和 Hashtable （数据结构，线程安全（synchronized 和 CAS ，synchronized））\")]),a._v(\" \"),t(\"p\",[a._v(\"Collections工具类：\\n方法：排序，替换，同步控制(推荐juc)\")]),a._v(\" \"),t(\"p\",[a._v(\"集合遍历问题，并发情况下，ConcurrentModificationException，fail-fast 机制。要在 foreach 循环里进行元素的 remove/add 操作\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"jvm\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#jvm\"}},[a._v(\"#\")]),a._v(\" JVM\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"内存区域\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#内存区域\"}},[a._v(\"#\")]),a._v(\" 内存区域\")]),a._v(\" \"),t(\"p\",[a._v(\"运行时数据区域(线程私有，共享)\")]),a._v(\" \"),t(\"ol\",[t(\"li\",[t(\"p\",[a._v(\"程序计数器（代码流程控制，记录当前线程执行位置）\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"Java虚拟机栈(栈帧组成，栈帧成分（局部变量）)\\n错误类型\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"本地方法栈（虚拟机native方法）\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"堆（放对象实例，非所有对象都在栈分配， JIT 编译器的发展与逃逸分析技术）\\n垃圾收集主要区域，分代，分区，目的，分配流程，错误原因（回收时间，内存空间）\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"方法区/元空间（存储东 西，参数，运行时常量池（Class文件，常量池表））\\n3.直接内存，OutOfMemoryError\")])])]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"虚拟机在Java堆中对象分配、布局、访问\\n创建对象过程\\n对象布局：对象头，实例数据，对其填充\\n对象访问：句柄，直接指针，好处\")])]),a._v(\" \"),t(\"p\",[a._v(\"字符串常量池（提升性能和减少内存消耗针对字符串）问题：字符串常量拼接得到的字符串常量在编译阶段就已经被存放字符串常量池，引用的值在程序编译期是无法确定的\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"垃圾回收\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#垃圾回收\"}},[a._v(\"#\")]),a._v(\" 垃圾回收\")]),a._v(\" \"),t(\"p\",[a._v(\"Java内存自动管理（核心堆内存中对象的分配和回收）\\n堆空间基本结构\\n对象分配流程(新对象，大对象，长期存活，年龄判定)\\n参数\\n各种GC(full,partial,)\")]),a._v(\" \"),t(\"p\",[a._v(\"对象死亡（回收前提）：引用计数，可达性\\n各种引用\\n废弃变量，无用类（实例，加载器，，class对象）\")]),a._v(\" \"),t(\"p\",[a._v(\"分代垃圾收集算法（标清，标复，标整）缺点，选择问题\\n垃圾收集器：serial，ParNew，\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"类文件结构-class文件\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类文件结构-class文件\"}},[a._v(\"#\")]),a._v(\" 类文件结构(class文件)\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"类加载过程\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#类加载过程\"}},[a._v(\"#\")]),a._v(\" 类加载过程\")]),a._v(\" \"),t(\"p\",[a._v(\"加载，连接（验证，准备，解析），初始化（真正执行类中定义java代码，情况）\")]),a._v(\" \"),t(\"p\",[a._v(\"使用，卸载（要求）\")]),a._v(\" \"),t(\"p\",[a._v(\"类加载详解：\\n类加载器(路径)\\n双亲委派机制，好处（避免重复加载）\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#\"}},[a._v(\"#\")])]),a._v(\" \"),t(\"p\",[a._v(\"JVM参数\\n1.堆内存\\n-Xms -Xmx （具体）\"),t(\"br\"),a._v(\"\\n-XX:NewSize=xx/-Xmn256m  -XX:MaxNewSize=xx 新生代    尽可能将对象分配在新生代   -XX:NewRatio=1新生代和老年代比值\")]),a._v(\" \"),t(\"p\",[a._v(\"元空间：\\n-XX:MetaspaceSize=N //设置 Metaspace 的初始（和最小大小）\\n-XX:MaxMetaspaceSize=N\")]),a._v(\" \"),t(\"p\",[a._v(\"垃圾收集器：\\n-XX:+UseSerialGC\\n-XX:+UseParallelGC\\n-XX:+UseParNewGC\\n-XX:+UseG1GC\")]),a._v(\" \"),t(\"p\",[a._v(\"GC记录\\n-XX:+UseGCLogFileRotation\\n-XX:NumberOfGCLogFiles=< number of log files >\\n-XX:GCLogFileSize=< file size >[ unit ]\\n-Xloggc:/path/to/gc.log\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"java\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java\"}},[a._v(\"#\")]),a._v(\" Java\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"并发\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#并发\"}},[a._v(\"#\")]),a._v(\" 并发\")]),a._v(\" \"),t(\"p\",[a._v(\"线程与进程（关系，区别，优缺点）\\n多线程优缺点\\n线程生命周期和状态\")]),a._v(\" \"),t(\"p\",[a._v(\"synchronized（目的，修饰对象（给xx加锁，进入xx（不是方法/代码块是对象）要获得xx的锁），经典应用,底层原理（代码块，方法），JDK1.6优化，与reentrantlock区别）\\nvolatile(Java内存模型，并发编程3个特性，与synchronized区别)\\nthreadlocal（目的（访问这个变量的每个线程都会有这个变量的本地副本），原理，内存泄漏）\\n线程池(好处，4种创建线程方式，2种创建线程池方式，ThreadPoolExecutor类分析（参数（策略））)\\nJUC包（Atomic原子类，AQS(定义，核心思想)）\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"mysql\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#mysql\"}},[a._v(\"#\")]),a._v(\" mysql\")]),a._v(\" \"),t(\"p\",[a._v(\"基本sql语句编写\\nMyISAM与InnoDB对比\\n事务（定义，四大特性及实现原理，问题，隔离级别）\\n索引（优缺点，历程，类型）\\n日志\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"redis\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#redis\"}},[a._v(\"#\")]),a._v(\" Redis\")]),a._v(\" \"),t(\"p\",[a._v(\"缓存，分布式锁，消息队列，支持事务，持久化、Lua脚本，多种集群方案\\nMemcached和redis(内存，过期，性能高)区别：\\n多种数据类型（）\\n使用原因：高性能（内存）高并发（mysqlQPS1wQPS10w+）\\n缓存读写策略(旁路缓存()，读写穿透，异步缓存写入)\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"spring框架\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#spring框架\"}},[a._v(\"#\")]),a._v(\" Spring框架\")]),a._v(\" \"),t(\"p\",[a._v(\"定义：开源轻量级，\")]),a._v(\" \"),t(\"h2\",{attrs:{id:\"笔试\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#笔试\"}},[a._v(\"#\")]),a._v(\" 笔试\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"java-2\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#java-2\"}},[a._v(\"#\")]),a._v(\" Java\")]),a._v(\" \"),t(\"p\",[a._v(\"关键字\\ncontinue、break 和 return\\n重载和重写的区别\\n基本数据类型\")]),a._v(\" \"),t(\"p\",[a._v(\"自动拆装箱\")]),a._v(\" \"),t(\"p\",[a._v(\"面向对象和面向过程\")]),a._v(\" \"),t(\"p\",[a._v(\"面向对象三大特征：封装（隐藏对象内部，不允许，提供），继承，多态\")]),a._v(\" \"),t(\"p\",[a._v(\"接口和抽象类共同点和区别\\n深浅拷贝\\n==和equals()区别\\nequals和hashCode()\")]),a._v(\" \"),t(\"p\",[a._v(\"String、StringBuffer、StringBuilder区别\")]),a._v(\" \"),t(\"p\",[a._v(\"string字符串\\nJava泛型，泛型擦除\\n反射\\nException 和 Error\")]),a._v(\" \"),t(\"h4\",{attrs:{id:\"分布式事务\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分布式事务\"}},[a._v(\"#\")]),a._v(\" 分布式事务\")]),a._v(\" \"),t(\"p\",[a._v(\"事务实现应该是具备原子性、一致性、隔离性和持久性，简称 ACID。\")]),a._v(\" \"),t(\"p\",[a._v(\"事务就是为了使得一些更新操作要么都成功，要么都失败。\")]),a._v(\" \"),t(\"p\",[a._v(\"本地事务失效：@transcations,传播机制中，需要通过代理对象调用事务方法，引入aspectj开启动态代理\")]),a._v(\" \"),t(\"p\",[a._v(\"定义：分布式系统中实现事务，它其实是由多个本地事务组合而成\")]),a._v(\" \"),t(\"p\",[a._v(\"cap:一致性，可用性，分区容错性，\")]),a._v(\" \"),t(\"p\",[a._v(\"舍弃强一致性，\"),t(\"strong\",[a._v(\"BASE理论\")]),a._v(\"：基本可用，软状态，最终一致性\")]),a._v(\" \"),t(\"p\",[a._v(\"刚性事务：遵循ACID，强一致性\")]),a._v(\" \"),t(\"p\",[a._v(\"柔性事务：遵循Base理论，最终一致性\")]),a._v(\" \"),t(\"p\",[a._v(\"对于分布式事务而言几乎满足不了 ACID，其实对于单机事务而言大部分情况下也没有满足 ACID，不然怎么会有四种隔离级别呢？所以更别说分布在不同数据库或者不同应用上的分布式事务了。\")]),a._v(\" \"),t(\"ul\",[t(\"li\",[a._v(\"分布式解决方案：\")])]),a._v(\" \"),t(\"ol\",[t(\"li\",[a._v(\"2PC(二阶段提交，二阶段提交是一种强一致设计，2PC \"),t(\"strong\",[a._v(\"引入一个事务协调者的角色\")]),a._v(\"来协调管理各参与者（也可称之为各本地资源）的提交和回滚，二阶段分别指的是准备（投票）和提交两个阶段。)\\n（1）准备阶段：协调者会给各参与者发送准备命令，你可以把准备命令理解成除了提交事务之外啥事都做完了\\n（2）提交或回滚阶段：同步等待所有资源的响应之后就进入第二阶段即提交阶段或回滚阶段（失败则回滚）\")])]),a._v(\" \"),t(\"p\",[a._v(\"即事务协调者协调各本地资源，分为2阶段，\")]),a._v(\" \"),t(\"ol\",{attrs:{start:\"2\"}},[t(\"li\",[a._v(\"3PC(为解决2pc部分问题，相比于2PC\"),t(\"strong\",[a._v(\"在参与者中也引入了超时机制\")]),a._v(\"，并且新增了一个阶段\"),t(\"strong\",[a._v(\"使得参与者可以利用这一个阶段统一各自的状态\")]),a._v(\"。)\")])]),a._v(\" \"),t(\"p\",[a._v('3pc用来解决 当协调者 和 \"某\"参与者 都挂了，不是 所有都挂了\\n，要是都挂了，没得说，神来了也不知道咋办')]),a._v(\" \"),t(\"p\",[a._v(\"（1）准备阶段\\n（2）预提交阶段\\n（3）提交阶段\")]),a._v(\" \"),t(\"ol\",{attrs:{start:\"3\"}},[t(\"li\",[a._v(\"TCC（柔性事务，事务补偿型,在各个服务里引入了一个 TCC 分布式事务的框架，订单服务里内嵌的那个 TCC 分布式事务框架可以感知到，各个服务的 Try 操作都成功或失败）\")])]),a._v(\" \"),t(\"p\",[a._v(\"开发人员自己编写开发三个方法，让人回调， try方法，confirm方法，cannel方法，如订单服务有这三个方法（如try是尝试锁库存，），库存服务也有这三个方法，\")]),a._v(\" \"),t(\"p\",[a._v(\"（1）try尝试,资源锁定+2\\n(2)confirm确认，真正执行即提交，真正+2\\n(3)cannel取消，撤销try-2\")]),a._v(\" \"),t(\"p\",[t(\"img\",{attrs:{src:\"/img/shiwu/tcc.PNG\",alt:\"\"}})]),a._v(\" \"),t(\"p\",[a._v(\"可在业务系统和数据库中使用\")]),a._v(\" \"),t(\"p\",[a._v(\"缺点：需要在对应业务编写对应代码，对业务有较大侵入和业务紧耦合\")]),a._v(\" \"),t(\"ol\",{attrs:{start:\"4\"}},[t(\"li\",[t(\"p\",[a._v(\"最大努力通知（mq按次数发消息，对应服务去订阅消息队列，收到失败消息后完成对应的解锁操作，\"),t(\"strong\",[a._v(\"订阅者一直不消费或者消费不了则会一直重试\")]),a._v(\" ，到最后进入死信队列）\")])]),a._v(\" \"),t(\"li\",[t(\"p\",[a._v(\"可靠消息+最终一致性\\n2PC 和 3PC 是一种强一致性事务，不过还是有数据不一致，阻塞等风险，而且只能用在数据库层面。\")])])]),a._v(\" \"),t(\"p\",[a._v(\"TCC 是一种补偿性事务思想，适用的范围更广，在业务层面实现，因此对业务的侵入性较大，每一个操作都需要实现对应的三个方法。\")]),a._v(\" \"),t(\"p\",[a._v(\"本地消息、事务消息和最大努力通知其实都是最终一致性事务\")])])}),[],!1,null,null,null);v.default=_.exports}}]);","extractedComments":[]}