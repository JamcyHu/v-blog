{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{409:function(e,n,t){\"use strict\";t.r(n);var s=t(56),i=Object(s.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":e.$parent.slotKey}},[t(\"p\",[e._v(\"订单服务(线程池配置 springsession配置 会员拦截器 threadlocal<MemberRespVo>loginUser.set(attribute) 实现webmvcconfigurer添加路径):\\n一去结算\\n1订单确认页抽取(地址信息s 所有购物项s 优惠卷 订单总额 应付价格  token）\"),t(\"br\"),e._v(\"\\n2订单数据获取(远程查地址(memberRespVo.getid)  远程查购物项(购物车拦截器 cartkey获取购物项(远程skuid查最新价格) 抽取购物项实体类有货  .thenRunAsync由skuids远程调库存查购物项有无货)  memberrespvo设置积分  总额价格在vo计算)   （feign远程调用请求头丢失，cart认为没登陆   需要自定义feign拦截器(requestcontextholder.getrequestattribute 原理threadlocal  attributes.getrequest获取请求  请求不为空(再获取头，template.header()放入新请求))）不带头无法确定属于哪个购物车\\n（使用线程池,主线程requestcontextholder.getattr, 异步中set  原理是threadlocal）\\nuuid token令牌 放入redis和订单确认vo  ajax表单\\n二提交订单（ordersubmitvo实体类 addrid paytype token payprice)（创单(Ordercreateto(order orderitems payprice fare)),验令牌，验价，锁库存）\\n(接口幂等（token,锁，唯一id，防重表,唯一约束） 多点，回点，fegin重试机制  使用token 先后删令牌都有问题 获取,对比,删除(原子性) redis中lua脚本)\\n1创单 2验令牌(拦截器获取用户 取redis中token lua脚本) 3验成功(创单(orderentity orderitementity)  4验价  try/catch5锁库存(Stock skuid wardid,num)stock.set wareSkuDao查仓库ids编写sql语句 遍历stock取skuid, wardids 再遍历wardid wareskudao编写sql(skuid,wardid,num)去锁库存)\\n( 可靠消息+最终一致性 加一个锁库存记录 不用定时任务(消耗内存，增加数据库压力，存在时间误差)，延时队列  死信路由(消息拒收,ttl时间,队列满丢前面消息)\\nconfiguration bean创建quueu,exchange,binding  库存服务配置消息json @enablerabbit 第一次连上rabbitmq才创建 )\\n远程锁库存问题:1下订单成功，没支付，库存回滚 2库锁成功，下面得业务失败，库存解锁（锁库存方法，保存库存工作单  锁成功，保工作单详情，给mq发消息(to(工作单id,详情工作单))  监听队列，取to中detailid查详情工作单 有解锁(to中工作单id查订单号 远程调订单服务查订单详情 订单状态取消/订单不存在 解锁库存unlockstock(工作单中skuid,num,) 手动回复/拒绝策略  更新库存工作单详情) 无即锁库存失败，不用解锁）\\n定时关闭订单:下订单中 锁库存成功后定时释放订单服务（还要发消息给库存队列 查库存状态 未解锁则调用解锁方法）\\n）\")]),e._v(\" \"),t(\"p\",[e._v(\"数据库事务隔离级别  事务传播行为\\n分布式事务 cap定 base理论(基本可用，实现最终一致)  分布式系统raft算法实现一致性  分布式事务方案(2pc对应seata,完成一个事务需要加很多锁,不适合高并发)\")]),e._v(\" \"),t(\"p\",[e._v(\"三去支付（非对称加密 私钥加签，公钥验签 线上切换支付宝网关url即可 同步和异步通知页面地址（需要内网穿透）uft8）\\n1整合支付(导入阿里sdk 导入alitemplate配置类(pay方法中有aliclient发请求返回页面) 编写接口传订单号查订单信息，调用ali.pay(),返回vo\"),t(\"br\"),e._v(\"\\n2支付成功同步回调会员页面（登录判断）\\n3会员远程调用订单分页 )\")]),e._v(\" \"),t(\"p\",[e._v(\"秒杀服务:\\n后台添加场次 关联商品\\n使用异步+定时任务  在config类中使用@EnableAsync @EnableScheduling 配置文件可指定线程池\\n一商品上架\\n1定时扫描活动得商品（远程调优惠服务 查最近三天活动 活动商品关联表 缓存放入redis活动(商品id)和活动商品信息redisTo(远程获sku基本数据，秒杀信息，随机码，redisson信号量(配置redissonclient)) 放入redis的数据都要判断 分布式锁+redistemplate.haskey()有就不用放入(定时任务商品上架幂等性问题)） ）\\n2加分布式锁\\n二查询秒杀商品\\n1去redis中获取当前参与秒杀的商品\\n2前端ajax\\n三商品详情页渲染（商品服务）\\n1 前端传skuid 绑定商品详情前缀key  遍历hash中所有key 用正则+skuid匹配  取出商品信息 处于活动时间才传随机码 商品服务调用\\n四秒杀商品的抢购（如何设计一个高并发的系统）\\n一设计(1独立服务2链接加密3库存预热,快速扣减(正常流程占库存太慢预加载)4动静分离)\"),t(\"br\"),e._v(\"\\n5网关拦截恶意请求  6流量错峰（验证码，购物车流程）7限流(前端点击次数，后端不合理请求，请求多次)熔断降级 8队列削峰\\n二秒杀抢购接口（session拦截器，config配置cookie域  1前端传killid,key,num\"),t(\"br\"),e._v(\"\\n2两套购物流程）\\n（1登录判断 2合法性校验（取得商品信息判断是否空 时间、随机码、商品id、数量（是否重复购买 幂等性需要redis占位redistemplate.opsforvalue().setifabsent（userid_sessionid_skuid），成功说明没买过））3获取信号量（client.get  semaphore.tryacquire(num) ）4信号量成功,发送mq消息，返回订单号，订单服务监听(创单，保存订单，订单项)   直接去支付）\")]),e._v(\" \"),t(\"p\",[e._v(\"事务从web的ThreadLocal开始，折磨到Spring的声明式事务，再到现在的分布式事务。\")]),e._v(\" \"),t(\"p\",[e._v(\"谷粒商城\\n优化点\\n难点，解决方案，达到什么目的\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[t(\"p\",[e._v(\"分布式锁\")])]),e._v(\" \"),t(\"li\",[t(\"p\",[e._v(\"分布式事务方案的选取\\n亮点\")])]),e._v(\" \"),t(\"li\",[t(\"p\",[e._v(\"查询商品详情页采用三维一体的多元存储(MySQL、Redis、Elasticsearch)完成商品数据的读写，提高大量并发访问，网页的响应速度提高70%。\\nElasticsearch选用它的目的是Java语言编写，高效的搜索引擎，使全文检索变得简单，提供了简单的Restful api,常见的场景就是跟一些log日志系统配合使用。创建新索引，配置模板，就是类似实体类的模板，使用JAVA操作ELS，引入ELS-REST-CLIENT依赖，原理是模拟发送HTTP请求，封装了ES操作，API使用简单，先创建操作els操作的客户端，构造索引request请求，client.index()存储数据，如果是查询的话则通过searchSourceBuilder封装查询的条件，通过client.search()查询条件；存储的数据的话设计成两个索引存储，通过后台上架商品，如果将所有的 商品信息都放在一个索引下浪费空间，构造上架商品信息模型，\\n有id是一个更新操作，保存部分信息用于检索和检索页信息显示\")])])]),e._v(\" \"),t(\"p\",[e._v(\"redis存一些session信息\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"采用Nginx做反向代理，以及搭建Tomacat服务器集群方式，解决前台网页高并发问题。\\nNginx是一个 轻量级/高性能的反向代理Web服务器，处理2-3万并发连接数，\\n反方代理就是请求统一被Nginx接收，nginx反向代理服务器接收到之后，按照一定的规 则分发给了后端的业务处理服务器进行处理了，使用Nginx充当互联网和web服务器中间层，安全，动态处理差，我这边是给它用来放置静态资源到HTML文件夹中，实现动静分离。，\\n主要就是在nginx.conf配置监听的路径，给它跳转到网关\")]),e._v(\" \"),t(\"li\",[e._v(\"独立完成秒杀系统的设计，通过Nginx、Redis、RabbitMQ消息队列多种手段提升系统并发量。\\n上架的话（幂等性可以通过redistemplate存场次id判断）：存redis，key开始结束+skuid，秒杀随机码（到时就公布），将库存作为分布式信号量\\nredisson依赖，分布式锁和分布式信号量都通过它获取\\n单独微服务，动静分离，库存预热（通过redis信号量），链接网页返回随机码，网关层拦截请求，流量错峰，通过限流（每人买几个，去redis中占位，成功扣信号量），通过队列削峰（获取信号量成功进入队列，慢慢完成业务）\")]),e._v(\" \"),t(\"li\",[e._v(\"采用SpringSession+ThreadLocal+拦截器，解决了分布式服务Session共享及多线程下Session传递问题，实现用户登录。\")])]),e._v(\" \"),t(\"p\",[e._v(\"分布式session解决了session同步和共享问题。\\n序列化问题\\nthreadLocal从拦截器 controller,service,dao,到相应请求都是同一线程，threadLocal用于同一线程共享数据\\nfeign丢失请求头，通过拦截器获取老请求，配置一个新拦截器RequestContextholder获取老请求，同步cookie到新请求中\\n异步也可以用RequestContextholder\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"从0到1构建出商品级的订单流程，采用RabbitMQ解决不同系统之间的通信问题，达到库存与订单同步释放和事务回滚的效果。\")]),e._v(\" \"),t(\"li\",[e._v(\"利用Kubernetes完成应用集群云部署，构建DevOps自动化流水线，实现原生应用上云。\")])]),e._v(\" \"),t(\"p\",[e._v(\"ioc aop源码\\nspring中bean的生命周期\\n面试官，你好，我叫连楚滨，目前就读于韩山师范学院大三，对java的一些技术生态，还有一些spring框架是比较熟悉的，对jvm原理有一定理解，数据库方面主要使用的是Mysql,熟悉redis的使用, 然后前端像thymeleaf模板引擎或vue框架能做到基本的使用，之前做过的项目主要有两个，第一个网上购物的电商系统，第二个项目是在线教育视频网站，主要说下最近的电商系统，电商系统是一个偏业务的系统，我在小组中的角色是后端系统开发，主要是负责以下，一是分析功能的需求，实现代码的编写，二设计系统的架构，使用springboot+mybatisplus+springcloud的搭建分布式系统，实现服务的模块化，增强系统可扩展性。三使用一些消息中间件redis,rabbitmq对复杂的系统进行解耦，瞬时流量削峰，解决一些分布式事务，接口幂等性，分布式锁的问题。四，通过自定义线程池，应对该项目中高并发情况下线程问题，降低系统资源的消耗，提高响应速度。大概的情况就是这样。\")]),e._v(\" \"),t(\"p\",[e._v(\"最近在做的项目是一个电商系统，采用微服务架构，我主要是负责以下的几个功能模块，认证服务，分为注册和登录，注册使用的阿里云的短信服务进行验证，登录分为普通登录和社交登录，使用oAuth2协议进行微博登录，获取用户信息，将用户信息放入分布式session中。购物车服务中，分为用户购物车和游客购物车，存在判断购物车类型和购物车合并的问题，通过定义拦截器获取session，使用ThreadLocal为使用用户信息变量的线程提供独立的副本，利用redis存储个人信息，判断购物车类型，基于购物车类型判断是否合并。订单服务，分为三步，一是去结算，使用异步编排生成订单确认页，存在feign远程调用请求头丢失的问题，对此我定义fegin拦截器通过requestcontextholder同步请求的cookie，实现请求传递；二是提交订单，这是一个幂等性操作，我对此使用lua脚本进行token令牌验证，还存在锁库存失败回滚的问题，使用mq队列，采用可靠消息+最终一致性实现库存解锁。三是去支付，整合支付宝的沙箱环境。秒杀服务具有瞬间高并发的特点，对此我主要采用了异步，redis缓存，mdq消息队列来应对瞬间高流量，实现秒杀服务的独立运行。以上就是我的介绍。\")]),e._v(\" \"),t(\"p\",[e._v(\"让业务以异步的方式运行\\n，自己提交到线程池大致的情况就是这样\\n难点：分布式锁\\nkolp-\\nkfk2112162e339e请牢记订单号，订单卡密查询与订单投诉必须输入订单号\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"通过explain命令得到sql执行计划\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#通过explain命令得到sql执行计划\"}},[e._v(\"#\")]),e._v(\" 通过explain命令得到sql执行计划\")]),e._v(\" \"),t(\"p\",[e._v(\"如：explain select * from table\")]),e._v(\" \"),t(\"p\",[e._v(\"id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | ﬁltered |\\nExtra\\n|+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------+|\\n1 | SIMPLE | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | NULL | No\\ntables used |\")]),e._v(\" \"),t(\"p\",[e._v(\"type，就是比较关键了，针对当前这个表的访问方法，这个之前我们都讲过很多，比如说const、ref、\\nrange、index、all之类的，分别代表了使用聚簇索引、二级索引、全表扫描之类的访问方式。\")]),e._v(\" \"),t(\"p\",[e._v(\"possible_keys，这也很关键，他是跟type结合起来的，意思就是说你type确定访问方式了，那么到底\\n有哪些索引是可供选择，可以使用的呢，这都会放这里。key，就是在possible_keys里实际选择的那个\\n索引，而key_len就是索引的长度。\\n内部资源仅 www.ppls\")]),e._v(\" \"),t(\"ul\",[t(\"li\",[e._v(\"剖析秒杀活动\\n主要是3个表\\n秒杀活动，秒杀活动场次，秒杀商品限制表（商品id，价格，数量）\")])]),e._v(\" \"),t(\"p\",[e._v(\"秒杀微服务\\n上架的话（幂等性可以通过redistemplate存场次id判断）：存redis，key开始结束+skuid，秒杀随机码（到时就公布），将库存作为分布式信号量\\nredisson依赖，分布式锁和分布式信号量都通过它获取\\n单独微服务，动静分离，库存预热（通过redis信号量），链接网页返回随机码，网关层拦截请求，流量错峰，通过限流（每人买几个，去redis中占位，成功扣信号量），通过队列削峰（获取信号量成功进入队列，慢慢完成业务）\")]),e._v(\" \"),t(\"p\",[e._v(\"查缓存，无查数据库（查缓存，无查，有返回），有返回数据\")]),e._v(\" \"),t(\"p\",[e._v(\"读模式：缓存失效\\n写模式：双写失效模式都有脏数据，实现强一致性：随机时间+分布式读写锁\")]),e._v(\" \"),t(\"p\",[e._v(\"springcache照顾到了读模式，写模式需要自己完成，适用常规数据（读多写少，及时性，一致性要求不高的数据），sync属性标志是同步方法，不需要redisson写模式只要有过期时间就行了（过期了触发主动更新）\\n特殊数据需要特殊设计（读写锁，cannal日志感知更新，直接查数据库）\")]),e._v(\" \"),t(\"p\",[e._v(\"springcache两个注解实现缓存一致性中的双写与\\n@cacheEvict失效模式\")]),e._v(\" \"),t(\"h2\",{attrs:{id:\"订单模块\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#订单模块\"}},[e._v(\"#\")]),e._v(\" 订单模块\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"主要表\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#主要表\"}},[e._v(\"#\")]),e._v(\" 主要表\")]),e._v(\" \"),t(\"p\",[e._v(\"1.订单表\\n会员id\\n订单号\\n金额（订单，应付，运费）\\n优惠\\n支付方式\\n订单状态\\n物流单号\\n积分/成长值\\n发票\\n地址（详细地址，省，城市，区）\\n电话\\n邮编\\n收货时间\\n收货状态\\n支付时间\")]),e._v(\" \"),t(\"p\",[e._v(\"2.订单项信息\")]),e._v(\" \"),t(\"p\",[e._v(\"订单id\\n订单号\\n标准单元格式(spuid,spu名字，spu图片，品牌，购买数量，，)\\n商品分类id\\n商品(skuid,sku名字，sku图片)\\n购买数量\\n销售属性组合\")]),e._v(\" \"),t(\"ol\",{attrs:{start:\"3\"}},[t(\"li\",[e._v(\"退货没做\")]),e._v(\" \"),t(\"li\",[e._v(\"退货原因\")]),e._v(\" \"),t(\"li\",[e._v(\"支付信息表\\n订单号\\n订单id\\n交易流水号\\n支付金额\\n支付状态\\n创建时间\\n确认时间\\n回调时间/回调内容\")])]),e._v(\" \"),t(\"h4\",{attrs:{id:\"消息队列\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#消息队列\"}},[e._v(\"#\")]),e._v(\" 消息队列\")]),e._v(\" \"),t(\"p\",[e._v(\"消息队列：提升异步处理能力(异步任务先发消息给队列)，应用解耦(服务调用间加消息队列)，流量控制（先放到消息队列）\\n消息代理和目的地（队列和主题）\")]),e._v(\" \"),t(\"p\",[e._v(\"整合rabbitmq，引入场景启动器，\"),t(\"strong\",[e._v(\"@EnableRabbit开启功能\")]),e._v(\",,spring.rabbit去properties中配置，通过AmqpAdmin创建交换机(与队列绑定，需指定路由键发送)，绑定，队列\\n给RABBITAUTOCONFIGURATIOn配置消息序列化器\\n@RabbitListener监听消息（方法/类上，属性是队列），方法参数是message，内容，和通道\\n可组合使用监听不同类型消息\\n@RabbitHandler（方法）\")]),e._v(\" \"),t(\"p\",[e._v(\"消息确认机制（三个端：发送端：服务端回调（publisher-confirms=true开启发送端确认，设置确认回调），消息到队列回调（publisher-returns=true，通过rabbittemplate设置对应的回调处理（对应端收到后就会自动触发）） 消费端：ack机制（listener.simple.acknowledge-mode=manual手动回复,通过channel.basicAck签收））\")]),e._v(\" \"),t(\"p\",[e._v(\"@EnableRedisHttpSession\\n\"),t(\"img\",{attrs:{src:\"/img/mysql/orderservice.PNG\",alt:\"orderservice\"}}),e._v(\"\\n订单服务主要是一个库存问题（锁定，回滚，与其他服务交互）\")]),e._v(\" \"),t(\"p\",[e._v(\"订单拦截器(实现HandlerInterceptor重写preHandler+web配置(implements WebMvcConfigurer重写addInterceptors))+ThreadLocal存储个人信息\")]),e._v(\" \"),t(\"p\",[e._v(\"订单服务(线程池配置 springsession配置 会员拦截器 threadlocal<MemberRespVo>loginUser.set(attribute) 实现webmvcconfigurer添加路径):\\n一去结算\")]),e._v(\" \"),t(\"ol\",[t(\"li\",[e._v(\"订单确认页抽取(地址信息（远程调会员服务（通过ThreadLocal中个人ID），地址id调库存计算运费()） 所有购物项（订单项，远程获取购物车中购物项,\"),t(\"strong\",[e._v(\"单独抽取一个远程查库存\")]),e._v(\"） 优惠卷 订单总额（在实体类中GET方法通过遍历items计算） 应付价格  token）\\nfeign丢失请求头问题（新请求（加上feign远程调用的请求拦截器，给IOC容器中配置requestInterceptor,重写apply方法，通过RequestContextHolder（原理也是threadLocal））获取老请求值，同步请求头数据到新请求的template中cookie （））\\n线程池异步编排(去进行远程调用，feign异步丢失请求头问题（RequestContextHolder直接在主方法线程中获取，再在异步中RequestContextHolder.set放置(attributes)）)\\n提交订单跳转（幂等性（token(原子)，锁，唯一约束（数据库唯一约束或redis 的set），hashmap表）））\")])]),e._v(\" \"),t(\"hr\"),e._v(\" \"),t(\"ol\",{attrs:{start:\"2\"}},[t(\"li\",[e._v(\"订单数据获取(远程查地址(memberRespVo.getid)  远程查购物项(购物车拦截器 cartkey获取购物项(远程skuid查最新价格) 抽取购物项实体类有货  .thenRunAsync由skuids远程调库存查购物项有无货)  memberrespvo设置积分  总额价格在vo计算)   （feign远程调用请求头丢失，cart认为没登陆   需要自定义feign拦截器(requestcontextholder.getrequestattribute 原理threadlocal  attributes.getrequest获取请求  请求不为空(再获取头，template.header()放入新请求))）不带头无法确定属于哪个购物车\\n（使用线程池,主线程requestcontextholder.getattr, 异步中set  原理是threadlocal）\\nuuid token令牌 放入redis和订单确认vo  ajax表单\")])]),e._v(\" \"),t(\"hr\"),e._v(\" \"),t(\"p\",[e._v(\"二提交订单\\n传地址id,支付方式，令牌，验价\\nthreadLocal获取个人信息，lua脚本验证令牌，(1)1L创单（封装订单实体类，订单号，（addid远程查库存返回地址邮费），远程获取当前购物车购物项（遍历（skuinfo,spuinfo（skuid远程调商品服务去查购物项中没有spu），订单项价格信息）构建订单项，计算订单价格放入订单（遍历订单项集合）），），0失败\\n(2)创单后验价（与前端传的价格math.abs(xx.substract().doublcValue())<0.01），\\n(3)保单（传OrderCreateTo（订单项集合，订单实体，总价，运费））---保订单，保订单项\\n（4）锁库存（远程库存（传订单号和订单项集合中的部分信息（skuid,skuname,count））----（warevo中skuid和仓库id集合，num）遍历参数中的skuid获取仓库有库存id集合放入warevo，遍历warevo从某个仓库扣库存\\n分布式事务问题(远程锁库存成功，库存服务逻辑故障的事务回滚问题/远程服务网络故障假失败/超时未支付)\")]),e._v(\" \"),t(\"p\",[e._v(\"本地事务失效：同一对象内事务方法互调失效问题，绕过动态代理，需开启ASPECTj动态代理功能\")]),e._v(\" \"),t(\"p\",[e._v(\"cap定理（只能实现两点），Base理论对CAP理论的延申，即不需要强一致性，达到基本可用，要求最终一致。\")]),e._v(\" \"),t(\"p\",[e._v(\"分布式事务的几种方案：分为刚性(遵循acid原则，强一致性)  采用分布式事务中常用柔性事务(遵循BASE理论，最终一致性) （1）TCC事务补偿型方案（业务拆分位3个阶段，准备，提交和回滚，有其中一方失败，就会调用回滚逻辑）（2）最大努力通知性方案(如一些支付结果的通知，可以通过MQ队列实现，设置最大通知次数，达到次数后就不通知)\\n（3）可靠消息（给对应服务发消息，设置手动回复，实现事务回滚）\")]),e._v(\" \"),t(\"p\",[e._v(\"通过发消息给rabbitmq的延时队列去关单，创建延时队列，交换机，释放队列\\nrabbitmqtemplate发消息，channel.baseack（）确认消息\\n库存工作单，库存工作详情表\")]),e._v(\" \"),t(\"p\",[e._v(\"（1）业务逻辑场景异常：每锁一个发一次，参数是库存工作详情单\\n监听的队列收到消息（工作单id，工作详情单，工作详情单id），根据详情单id去再查一遍，不等于空就解锁（详情单由id查订单号，远程查订单状态未支付，解锁）\\n（2）超时未支付回滚\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"商品服务\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#商品服务\"}},[e._v(\"#\")]),e._v(\" 商品服务\")]),e._v(\" \"),t(\"p\",[e._v(\"数据一致性（写）==读多写多(数据库)，读多写少（读写锁），使用中间件cannal订阅Mysql的binlog\\n缓存失效（读）\")]),e._v(\" \"),t(\"h4\",{attrs:{id:\"购物车服务\"}},[t(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#购物车服务\"}},[e._v(\"#\")]),e._v(\" 购物车服务\")]),e._v(\" \"),t(\"p\",[e._v(\"在线购车和离线购物车问题\")]),e._v(\" \"),t(\"p\",[e._v(\"（ordersubmitvo实体类 addrid paytype token payprice)（创单(Ordercreateto(order orderitems payprice fare)),验令牌，验价，锁库存）\\n(接口幂等（token,锁，唯一id，防重表,唯一约束） 多点，回点，fegin重试机制  使用token 先后删令牌都有问题 获取,对比,删除(原子性) redis中lua脚本)\\n1创单 2验令牌(拦截器获取用户 取redis中token lua脚本) 3验成功(创单(orderentity orderitementity)  4验价  try/catch5锁库存(Stock skuid wardid,num)stock.set wareSkuDao查仓库ids编写sql语句 遍历stock取skuid, wardids 再遍历wardid wareskudao编写sql(skuid,wardid,num)去锁库存)\\n( 可靠消息+最终一致性 加一个锁库存记录 不用定时任务(消耗内存，增加数据库压力，存在时间误差)，延时队列  死信路由(消息拒收,ttl时间,队列满丢前面消息)\\nconfiguration bean创建quueu,exchange,binding  库存服务配置消息json @enablerabbit 第一次连上rabbitmq才创建 )\\n远程锁库存问题:1下订单成功，没支付，库存回滚 2库锁成功，下面得业务失败，库存解锁（锁库存方法，保存库存工作单  锁成功，保工作单详情，给mq发消息(to(工作单id,详情工作单))  监听队列，取to中detailid查详情工作单 有解锁(to中工作单id查订单号 远程调订单服务查订单详情 订单状态取消/订单不存在 解锁库存unlockstock(工作单中skuid,num,) 手动回复/拒绝策略  更新库存工作单详情) 无即锁库存失败，不用解锁）\\n定时关闭订单:下订单中 锁库存成功后定时释放订单服务（还要发消息给库存队列 查库存状态 未解锁则调用解锁方法））\")]),e._v(\" \"),t(\"p\",[e._v(\"数据库事务隔离级别  事务传播行为\\n分布式事务 cap定 base理论(基本可用，实现最终一致)  分布式系统raft算法实现一致性  分布式事务方案(2pc对应seata,完成一个事务需要加很多锁,不适合高并发)\")]),e._v(\" \"),t(\"p\",[e._v(\"三去支付（非对称加密 私钥加签，公钥验签 线上切换支付宝网关url即可 同步和异步通知页面地址（需要内网穿透）uft8）\\n1整合支付(导入阿里sdk 导入alitemplate配置类(pay方法中有aliclient发请求返回页面) 编写接口传订单号查订单信息，调用ali.pay(),返回vo\\n2支付成功同步回调会员页面（登录判断）\\n3会员远程调用订单分页 )\")])])}),[],!1,null,null,null);n.default=i.exports}}]);","extractedComments":[]}